package idl

const (
	// Punctuation
	Equals             string = "="
	EqualsEquals              = "=="
	Colon                     = ":"
	SemiColon                 = ";"
	ColonColon                = "::"
	LeftBrace                 = "{"
	RightBrace                = "}"
	LeftParenthsis            = "("
	RightParenthsis           = ")"
	LeftAngleBrace            = "<"
	RightAngleBrace           = ">"
	LeftSquareBrace           = "["
	RightSquareBrace          = "]"
	SingleQoute               = "'"
	DoubleQoute               = "\""
	Slash                     = "/"
	BackSlash                 = "\\"
	Comma                     = ","
	Plus                      = "+"
	Minus                     = "-"
	Pipe                      = "|"
	PipePipe                  = "||"
	Carot                     = "^"
	Ampersand                 = "&"
	AmpersandAmpersand        = "&&"
	Star                      = "*"
	Percent                   = "%"
	Tilde                     = "~"
	AtSign                    = "@"
	Hash                      = "#"
	HashHash                  = "##"
	Bang                      = "!"

	//KeyWords
	Abstract    = "abstract"
	Any         = "any"
	Alias       = "alias"
	Attribute   = "attribute"
	BitMask     = "bitmask"
	BitFeild    = "bitfeild"
	BitSet      = "bitset"
	Boolean     = "boolean"
	Case        = "case"
	Char        = "char"
	Component   = "component"
	Connector   = "connector"
	Const       = "const"
	Consumes    = "consumes"
	Context     = "context"
	Custom      = "custom"
	Default     = "default"
	Double      = "double"
	Exception   = "exception"
	Emits       = "emits"
	Enum        = "enum"
	EventType   = "eventtype"
	Factory     = "factory"
	False       = "false"
	Finder      = "finder"
	Fixed       = "fixed"
	Float       = "float"
	GetRaises   = "getraises"
	Home        = "home"
	Import      = "import"
	In          = "in"
	InOut       = "inout"
	Interface   = "interface"
	Local       = "local"
	Long        = "long"
	Manages     = "manages"
	Map         = "map"
	MirrorPort  = "mirrorport"
	Module      = "module"
	Multiple    = "multiple"
	Native      = "native"
	Object      = "object"
	Octect      = "octet"
	OneWay      = "oneway"
	Out         = "out"
	PrimaryKey  = "primarykey"
	Private     = "private"
	Port        = "port"
	PortType    = "porttype"
	Provides    = "provides"
	Public      = "public"
	Publishes   = "publishes"
	Raises      = "Raises"
	ReadOnly    = "readonly"
	SetRaises   = "setraises"
	Sequence    = "sequence"
	Short       = "short"
	String      = "string"
	Struct      = "struct"
	Supports    = "supports"
	Switch      = "switch"
	True        = "true"
	Truncatable = "truncatable"
	TypeDef     = "typedef"
	TypeId      = "typeid"
	TypeName    = "typename"
	TypePrefix  = "typeprefix"
	UnSinged    = "unsigned"
	Union       = "union"
	Uses        = "uses"
	ValueBase   = "valuebase"
	ValueType   = "valuetype"
	Void        = "void"
	WChar       = "wchar"
	WString     = "wstring"
	Int8        = "int8"
	UInt8       = "uint8"
	Int16       = "int16"
	UInt16      = "uint16"
	Int32       = "int32"
	UInt32      = "uint32"
	Int64       = "int64"
	UInt64      = "uint64"

	//Litterals
	Integer        = "Integer"
	FixedPoint     = "FixedPoint"
	FloatingPoint  = "FloatingPoint"
	CharLitteral   = "Char"
	StringLitteral = "String"
	Identifier     = "Identifier"
	Comment        = "Comment"
	EOF            = "EOF"
)

type Token struct {
	token_type string
	lexme      string
	line_no    int
	start      int
	end        int
}

func makeToken(token_type string, lexeme string, lineno int, start int, end int) Token {
	return Token{
		token_type: token_type,
		lexme:      lexeme,
		line_no:    lineno,
		start:      start,
		end:        end,
	}
}
